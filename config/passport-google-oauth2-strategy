const passport = require("passport");
const googleStrategy = require("passport-google-oauth").OAuth2Strategy;
const crypto = require("crypto");
const { doesNotMatch } = require('assert');
const User = require("../models/user");
// tell passport to use a new  strategy for google login
passport.use(
  new googleStrategy(
    {
      clientID:
        "246769253050-la1k7eorjl8ug2n8n43dnnjvstdhq7ca.apps.googleusercontent.com",
      clientSecret: "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",
      callbackURL: "http://localhost:8000/users/auth/google/callback",
    },
//     async function (accessToken, refreshToken, profile, done) {
//       // find a user
//       await User.findOne({ email: profile.emails[0].value })
//       // .exec(function (
//       //   err,
//       //   user
//       // ) {
//       //   if (err) {
//       //     console.log("error in crreating user  google strategy-passport", err);
//       //     return;
//       //   }
//       //   console.log(profile);
//         if (user) {
//           // if found ,set this user as req.user
//           return done(null, user);
//         } else {
//           // if not found, create the user and set it as req.user
//           User.create(
//             {
//               name: profile.displayName,
//               email: profile.emails[0].value,
//               password: crypto.randomBytes(20).toString("hex"),
//             },
//             function (err, user) {
//               if (err) {
//                 console.log("error in creating  google strategy-passport", err);
//                 return;
//               }
//               return done(null, user);
//             }
//           );
//         }
//       });
//     }
//   )
// );

// module.exports = passport;







async function(accessToken, refreshToken, profile,done)
{
try{
    //find the user
const user=await User.findOne({email:profile.emails[0].value});
console.log(profile);
if(user)
{
    // if found ,set this user as req.user
    return done(null,user);
}
else{
    try{
        // if not found, create the user and set it as req.user
   await User.create({
        name:profile.displayName,
        email:profile.emails[0].value,
        password:crypto.randomBytes(20).toString('hex')
    })
}catch(err)
{
  console.log("Error is coming creating user in google startegy-passport",err);
return;
}
return done(null,user);
}

}catch(err)
{
console.log("Error in google startegy-passport",err);
return;
}

}
))
module.exports=passport;


